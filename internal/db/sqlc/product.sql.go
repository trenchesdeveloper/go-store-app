// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, category_id, image_url, price, user_id, stock)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, description, category_id, image_url, price, user_id, stock, created_at, updated_at
`

type CreateProductParams struct {
	Name        string         `json:"name"`
	Description pgtype.Text    `json:"description"`
	CategoryID  int32          `json:"category_id"`
	ImageUrl    pgtype.Text    `json:"image_url"`
	Price       pgtype.Numeric `json:"price"`
	UserID      int32          `json:"user_id"`
	Stock       int32          `json:"stock"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.CategoryID,
		arg.ImageUrl,
		arg.Price,
		arg.UserID,
		arg.Stock,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.ImageUrl,
		&i.Price,
		&i.UserID,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, category_id, image_url, price, user_id, stock, created_at, updated_at
FROM products
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.ImageUrl,
		&i.Price,
		&i.UserID,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, category_id, image_url, price, user_id, stock, created_at, updated_at
FROM products
ORDER BY id ASC
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.ImageUrl,
			&i.Price,
			&i.UserID,
			&i.Stock,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2, description = $3, category_id = $4, image_url = $5, price = $6, user_id = $7, stock = $8, updated_at = now()
WHERE id = $1
RETURNING id, name, description, category_id, image_url, price, user_id, stock, created_at, updated_at
`

type UpdateProductParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description pgtype.Text    `json:"description"`
	CategoryID  int32          `json:"category_id"`
	ImageUrl    pgtype.Text    `json:"image_url"`
	Price       pgtype.Numeric `json:"price"`
	UserID      int32          `json:"user_id"`
	Stock       int32          `json:"stock"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CategoryID,
		arg.ImageUrl,
		arg.Price,
		arg.UserID,
		arg.Stock,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.ImageUrl,
		&i.Price,
		&i.UserID,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
