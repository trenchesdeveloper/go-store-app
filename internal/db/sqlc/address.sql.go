// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: address.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO address (user_id, address_line1,address_line2, city, state, post_code, country)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, address_line1, address_line2, city, state, post_code, country, created_at, updated_at
`

type CreateAddressParams struct {
	UserID       int32       `json:"user_id"`
	AddressLine1 string      `json:"address_line1"`
	AddressLine2 pgtype.Text `json:"address_line2"`
	City         string      `json:"city"`
	State        string      `json:"state"`
	PostCode     int32       `json:"post_code"`
	Country      string      `json:"country"`
}

type CreateAddressRow struct {
	ID           int32            `json:"id"`
	UserID       int32            `json:"user_id"`
	AddressLine1 string           `json:"address_line1"`
	AddressLine2 pgtype.Text      `json:"address_line2"`
	City         string           `json:"city"`
	State        string           `json:"state"`
	PostCode     int32            `json:"post_code"`
	Country      string           `json:"country"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (CreateAddressRow, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.UserID,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.PostCode,
		arg.Country,
	)
	var i CreateAddressRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostCode,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM address
WHERE id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAddress, id)
	return err
}

const findAddressByUser = `-- name: FindAddressByUser :many
SELECT id, user_id, address_line1, address_line2, city, state, post_code, country, created_at, updated_at
FROM address
WHERE user_id = $1
`

type FindAddressByUserRow struct {
	ID           int32            `json:"id"`
	UserID       int32            `json:"user_id"`
	AddressLine1 string           `json:"address_line1"`
	AddressLine2 pgtype.Text      `json:"address_line2"`
	City         string           `json:"city"`
	State        string           `json:"state"`
	PostCode     int32            `json:"post_code"`
	Country      string           `json:"country"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) FindAddressByUser(ctx context.Context, userID int32) ([]FindAddressByUserRow, error) {
	rows, err := q.db.Query(ctx, findAddressByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAddressByUserRow{}
	for rows.Next() {
		var i FindAddressByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.State,
			&i.PostCode,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAddress = `-- name: GetAddress :one
SELECT id, user_id, address_line1, address_line2, city, state, post_code, country, created_at, updated_at
FROM address
WHERE id = $1
`

type GetAddressRow struct {
	ID           int32            `json:"id"`
	UserID       int32            `json:"user_id"`
	AddressLine1 string           `json:"address_line1"`
	AddressLine2 pgtype.Text      `json:"address_line2"`
	City         string           `json:"city"`
	State        string           `json:"state"`
	PostCode     int32            `json:"post_code"`
	Country      string           `json:"country"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetAddress(ctx context.Context, id int32) (GetAddressRow, error) {
	row := q.db.QueryRow(ctx, getAddress, id)
	var i GetAddressRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostCode,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAddresses = `-- name: ListAddresses :many
SELECT id, user_id, address_line1, address_line2, city, state, post_code, country, created_at, updated_at
FROM address
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListAddressesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListAddressesRow struct {
	ID           int32            `json:"id"`
	UserID       int32            `json:"user_id"`
	AddressLine1 string           `json:"address_line1"`
	AddressLine2 pgtype.Text      `json:"address_line2"`
	City         string           `json:"city"`
	State        string           `json:"state"`
	PostCode     int32            `json:"post_code"`
	Country      string           `json:"country"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) ListAddresses(ctx context.Context, arg ListAddressesParams) ([]ListAddressesRow, error) {
	rows, err := q.db.Query(ctx, listAddresses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAddressesRow{}
	for rows.Next() {
		var i ListAddressesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.State,
			&i.PostCode,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE address
SET
    user_id = COALESCE($2, user_id),
    address_line1 = COALESCE($3, address_line1),
    address_line2 = COALESCE($4, address_line2),
    city = COALESCE($5, city),
    state = COALESCE($6, state),
    post_code = COALESCE($7, post_code),
    country = COALESCE($8, country),
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
RETURNING id, user_id, address_line1, address_line2, city, state, post_code, country, created_at, updated_at
`

type UpdateAddressParams struct {
	UserID       int32       `json:"user_id"`
	UserID_2     int32       `json:"user_id_2"`
	AddressLine1 string      `json:"address_line1"`
	AddressLine2 pgtype.Text `json:"address_line2"`
	City         string      `json:"city"`
	State        string      `json:"state"`
	PostCode     int32       `json:"post_code"`
	Country      string      `json:"country"`
}

type UpdateAddressRow struct {
	ID           int32            `json:"id"`
	UserID       int32            `json:"user_id"`
	AddressLine1 string           `json:"address_line1"`
	AddressLine2 pgtype.Text      `json:"address_line2"`
	City         string           `json:"city"`
	State        string           `json:"state"`
	PostCode     int32            `json:"post_code"`
	Country      string           `json:"country"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (UpdateAddressRow, error) {
	row := q.db.QueryRow(ctx, updateAddress,
		arg.UserID,
		arg.UserID_2,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.PostCode,
		arg.Country,
	)
	var i UpdateAddressRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostCode,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
