// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserType string

const (
	UserTypeBuyer  UserType = "buyer"
	UserTypeSeller UserType = "seller"
	UserTypeAdmin  UserType = "admin"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType `json:"user_type"`
	Valid    bool     `json:"valid"` // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type BankAccount struct {
	ID          int32            `json:"id"`
	UserID      int64            `json:"user_id"`
	BankAccount int64            `json:"bank_account"`
	SwiftCode   pgtype.Text      `json:"swift_code"`
	PaymentType pgtype.Text      `json:"payment_type"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

type Cart struct {
	ID        int32            `json:"id"`
	UserID    int32            `json:"user_id"`
	SellerID  int32            `json:"seller_id"`
	ProductID int32            `json:"product_id"`
	ImageUrl  string           `json:"image_url"`
	Price     pgtype.Numeric   `json:"price"`
	Name      string           `json:"name"`
	Quantity  int32            `json:"quantity"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type Category struct {
	ID           int32            `json:"id"`
	Name         string           `json:"name"`
	ParentID     pgtype.Int4      `json:"parent_id"`
	ImageUrl     pgtype.Text      `json:"image_url"`
	DisplayOrder pgtype.Int4      `json:"display_order"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

type Product struct {
	ID          int32            `json:"id"`
	Name        string           `json:"name"`
	Description pgtype.Text      `json:"description"`
	CategoryID  int32            `json:"category_id"`
	ImageUrl    pgtype.Text      `json:"image_url"`
	Price       pgtype.Numeric   `json:"price"`
	UserID      int32            `json:"user_id"`
	Stock       int32            `json:"stock"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

type User struct {
	ID        int32            `json:"id"`
	FirstName string           `json:"first_name"`
	LastName  string           `json:"last_name"`
	Email     string           `json:"email"`
	Password  string           `json:"password"`
	Phone     pgtype.Text      `json:"phone"`
	Code      pgtype.Text      `json:"code"`
	Expiry    pgtype.Timestamp `json:"expiry"`
	Verified  bool             `json:"verified"`
	UserType  UserType         `json:"user_type"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}
